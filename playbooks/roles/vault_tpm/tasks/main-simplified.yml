# roles/vault_tpm/tasks/main.yml - Simplified version for demo
---
# For demo purposes, we'll create a secure key without full TPM integration
# This avoids package availability issues while maintaining security

- name: Install basic dependencies
  ansible.builtin.package:
    name:
      - openssl
      - unzip
      - curl
    state: present

# Create secure directory for keys
- name: Create secure key directory
  ansible.builtin.file:
    path: /root/vault-keys
    state: directory
    mode: "0700"
    owner: root
    group: root

# Force regeneration - remove old keys and CSR if requested
- name: Remove old keys for regeneration
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - /root/vault-keys/private-key.pem
    - /root/vault-keys/csr.pem
  when: vault_tpm_force_regenerate | default(false)

# Generate a secure private key (simulating what TPM would do)
- name: Generate secure private key
  ansible.builtin.command:
    cmd: openssl genrsa -out /root/vault-keys/private-key.pem 2048
  args:
    creates: "{{ '/root/vault-keys/private-key.pem' if not (vault_tpm_force_regenerate | default(false)) else omit }}"

- name: Set secure permissions on private key
  ansible.builtin.file:
    path: /root/vault-keys/private-key.pem
    mode: "0600"
    owner: root
    group: root

# Generate CSR using the private key
- name: Generate CSR using private key
  ansible.builtin.command:
    cmd: openssl req -new -key /root/vault-keys/private-key.pem -subj "/CN={{ inventory_hostname }}.{{ domain | default('hashicorp.local') }}" -out /root/vault-keys/csr.pem
  args:
    creates: "{{ '/root/vault-keys/csr.pem' if not (vault_tpm_force_regenerate | default(false)) else omit }}"

# Ensure CSR was created successfully
- name: Check if CSR exists
  ansible.builtin.stat:
    path: /root/vault-keys/csr.pem
  register: vault_tpm_csr_stat
  failed_when: not vault_tpm_csr_stat.stat.exists
  changed_when: false

# Read CSR content from remote host
- name: Read CSR content from remote host
  ansible.builtin.slurp:
    src: /root/vault-keys/csr.pem
  register: vault_tpm_remote_csr_data

# Validate CSR was read successfully
- name: Validate CSR was read successfully
  ansible.builtin.fail:
    msg: "Failed to read CSR file. Check file existence and permissions."
  when: vault_tpm_remote_csr_data.content is not defined or vault_tpm_remote_csr_data.content | length == 0

# Set fact for other roles to use
- name: Set remote CSR data as a fact
  ansible.builtin.set_fact:
    vault_tpm_remote_csr_data_fact: "{{ vault_tpm_remote_csr_data }}"
    vault_tpm_private_key_path: "/root/vault-keys/private-key.pem"

# Display success message
- name: Display key generation success
  ansible.builtin.debug:
    msg: "Private key and CSR generated successfully for {{ inventory_hostname }}.{{ domain | default('hashicorp.local') }}"
